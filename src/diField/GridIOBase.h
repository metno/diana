// -*- c++ -*-
/*
 Copyright (C) 2020-2022 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#ifndef DIANA_DIFIELD_GRIDIOBASE_H_
#define DIANA_DIFIELD_GRIDIOBASE_H_

#include "GridInventoryTypes.h"
#include "diFieldFwd.h"
#include "diValues.h"

#include <puTools/miTime.h>

#include <map>
#include <set>
#include <string>

/**
 * Base class for all grid sources
 */
class GridIOBase
{
public:
  GridIOBase(const GridIOBase&) = delete;
  GridIOBase& operator=(const GridIOBase&) = delete;

  GridIOBase();
  virtual ~GridIOBase();

  virtual const gridinventory::Inventory& getInventory() const = 0;

  virtual const gridinventory::ReftimeInventory& getReftimeInventory(const std::string reftime) const = 0;

  virtual void setReferencetimeLimits(const std::string& min, const std::string& max) = 0;

  virtual std::set<std::string> getReferenceTimes() const = 0;

  //! get the grid from reftime with name = grid
  virtual const gridinventory::Grid& getGrid(const std::string& reftime, const std::string& grid) = 0;

  //! get the Taxis from reftime with name = taxis
  virtual const gridinventory::Taxis& getTaxis(const std::string& reftime, const std::string& taxis) = 0;

  //! get the Zaxis from reftime with name = zaxis
  virtual const gridinventory::Zaxis& getZaxis(const std::string& reftime, const std::string& zaxis) = 0;

  //! get the extraaxis from reftime with name = extraaxis
  virtual const gridinventory::ExtraAxis& getExtraAxis(const std::string& reftime, const std::string& extraaxis) = 0;

  //! make and initialize Field
  virtual Field_p initializeField(const std::string& modelname, const std::string& reftime, const gridinventory::GridParameter& param, const std::string& level,
                                  const miutil::miTime& time, const std::string& elevel) = 0;

  //! Returns whether the source has changed since the last makeInventory
  virtual bool sourceChanged() = 0;

  //! Return referencetime from filename given in constructor
  virtual std::string getReferenceTime() const = 0;

  //! Returns true if referencetime matches
  virtual bool referenceTimeOK(const std::string& refTime) = 0;

  /**
   * Build the inventory from source
   * @param reftime, reference time to make inventory for. Use miTime::undef for none
   * @return status
   */
  virtual bool makeInventory(const std::string& reftime) = 0;

  //! Get data slice as Field
  virtual Field_p getData(const std::string& reftime, const gridinventory::GridParameter& param, const std::string& level, const miutil::miTime& time,
                          const std::string& elevel) = 0;

  //! Put data slice from Field. Assumes that the field was generated by this GridIO instance.
  virtual bool putData(const std::string& reftime, const gridinventory::GridParameter& param, const std::string& level, const miutil::miTime& time,
                       const std::string& elevel, const std::string& unit, Field_cp field, const std::string& output_time) = 0;

  virtual diutil::Values_p getVariable(const std::string& varName) = 0;
};

#endif /* DIANA_DIFIELD_GRIDIOBASE_H_ */
